{"version":3,"sources":["components/Filter.js","components/Personform.js","components/Display.js","services/person.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","useState","search","setSearch","persons","filterDiplay","setFilterDisplay","onChange","event","oldList","map","person","name","toLowerCase","number","newList","filter","includes","handleChange","target","value","i","key","Personform","onSubmit","addPerson","newName","handlePersonadd","newNum","handleNumadd","onClick","handleRepeat","type","Display","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","App","setPersons","setNewName","setNewNum","useEffect","PersonService","initialPersons","listOfNames","nameLowerCase","window","confirm","existingObject","updatedPerson","updatedPersons","catch","error","console","log","preventDefault","concat","newname","personParam","res","perParam","err","handleDelOf","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.364be638.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\nconst Filter = (props) => {\n\n    const [search, setSearch] = useState(\"\");\n\n    const [filterDiplay, setFilterDisplay] = useState(props.persons);\n\n    const handleChange = (event) => {\n\n        let oldList = props.persons.map((person) => {\n            return { name: person.name.toLowerCase(), number: person.number }\n        })\n\n        if (event !== \"\") {\n            let newList = [];\n            setSearch(event);\n\n            newList = oldList.filter(person => person.name.includes(search.toLowerCase()));\n            setFilterDisplay(newList)\n        } else {\n            setFilterDisplay(props.persons);\n        }\n    }\n    return (\n        <div>\n            filter shown with <input onChange={event => handleChange(event.target.value)} />\n            {filterDiplay.map((person, i) => <p key={i}>{person.name} <span>{person.number}</span></p>)}\n        </div>\n    );\n}\n\nexport default Filter","import React from 'react'\n\n\nconst Personform = (props) => {\n\n    return (\n        <div>\n\n            <form onSubmit={props.addPerson} >\n                <h3>add a new</h3>\n                <div>\n                    name: <input value={props.newName} onChange={props.handlePersonadd} />\n                </div>\n                <div>\n                    number: <input value={props.newNum} onChange={props.handleNumadd} />\n                </div>\n                <div>\n                    <button onClick={props.handleRepeat} type=\"submit\">add</button>\n                </div>\n            </form>\n\n            \n\n        </div>\n    );\n}\n\n\nexport default Personform","//import axios from 'axios';\nimport React from 'react';\n\nconst Display = (persons) => {\n\n    return (\n        <div>\n            {persons.name} {persons.number}\n        </div>\n    );\n}\n\nexport default Display;","import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then( response => response.data);\n}\n\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then( response => response.data);\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(response => response.data);\n}\n\nconst delThis = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default {getAll, create, update, delThis}","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport Personform from './components/Personform';\nimport Display from './components/Display';\nimport PersonService from './services/person';\nimport Notification from './components/Notification';\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('');\n  const [newNum, setNewNum] = useState('');\n\n  //get data from the server and update DOM if something changes\n  const hook = () => {\n    PersonService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons);\n      })\n\n  }\n\n  useEffect(hook, []);\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    const personObect = {\n      name: newName,\n      number: newNum\n    };\n    PersonService\n      .create(personObect)\n      .then(response => {\n        setPersons(persons.concat(response))\n        setNewName(\"\");\n        setNewNum(\"\");\n      })\n  };\n\n\n  const handlePersonadd = (event) => {\n    console.log(event.target.value);\n    setNewName(event.target.value);\n  };\n\n\n  const handleNumadd = (event) => {\n    console.log(event.target.value)\n    setNewNum(event.target.value);\n  }\n\n  const listOfNames = persons.map(person => person.name.toLowerCase())\n  const nameLowerCase = newName.toLowerCase()\n\n  if (listOfNames.includes(nameLowerCase)) {\n    const confirmation = window.confirm(`${newName} is already part of the phonebook. Replace the existing number with a the one provided?`)\n\n    // if user selects cancel, then stop \n    if (!confirmation) {\n      return null\n    }\n    // get existing person object\n    const existingObject = persons.filter(person => {\n      return person.name.toLowerCase() === nameLowerCase\n    })[0]\n\n    // store id of personObject to be updated\n    const id = existingObject.id\n\n    // create new object for this person which has updated number\n    const newObject = {\n      ...existingObject,\n      number: newNum\n    }\n    PersonService.update(id, newObject)\n      .then(updatedPerson => {\n        // the update was successful take response data and update state variable\n        const updatedPersons = persons.map(person =>\n          person.id === id ? updatedPerson : person)\n        setPersons(updatedPersons)\n\n        // add message to inform user the update was successful\n\n\n        // reset form inputs\n        setNewName('')\n        setNewNum('')\n      })\n      .catch(error => {\n        console.log(error)\n      })\n\n\n    // prevent application from executing any further\n    return null\n  }\n\n  //the function that will be used for DELETING users\n  //PSA !When you setNotes using the response received directly things break things.\n  //instead you map the data returned using a function. USE A FUNCTION!!!!!\n  function handleDelOf(id) {\n    console.log(\"handle deletion of \", persons);\n\n    PersonService\n      .delThis(id)\n      .then(res => {\n        console.log(res, \" might have been deleted\")\n        setPersons(persons.map(perParam => perParam.id !== id ? perParam : res.data))\n      })\n      .catch(err => {\n        console.log(\"shit happened\", err)\n      })\n  }\n\n  return (\n    <div>\n\n      <h2>Phonebook</h2>\n      <Filter value={newName} persons={persons} />\n\n      <Personform addPerson={addPerson} newname={newName} handlePersonadd={handlePersonadd} newNum={newNum}\n        handleNumadd={handleNumadd} />\n\n      <h3> Numbers </h3>\n\n      {persons.map(personParam =>\n        <div key={personParam.id}>\n          <Display key={personParam.id} name={personParam.name} number={personParam.number} />\n          <button onClick={() => handleDelOf(personParam.id)}>delete</button>\n        </div>\n      )}\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}